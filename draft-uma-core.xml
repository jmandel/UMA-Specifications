<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
"http://xml.resource.org/authoring/rfc2629.dtd" [
<!ENTITY RFC2119 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2617 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2617.xml">
<!ENTITY UMA PUBLIC "" "http://kantarainitiative.org/confluence/display/uma/Home">
<!ENTITY UMAreqs PUBLIC "" "http://kantarainitiative.org/confluence/display/uma/UMA+Requirements">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC4627 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4627.xml">
]>
<rfc category="std" docName="draft-hardjono-oauth-umacore-07d"
     ipr="trust200902">
  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

  <?rfc toc='yes' ?>

  <?rfc tocdepth='4' ?>

  <?rfc symrefs='yes' ?>

  <?rfc sortrefs='yes' ?>

  <?rfc compact='yes' ?>

  <?rfc subcompact='no' ?>

  <front>
    <title abbrev="UMA Core">User-Managed Access (UMA) Profile of OAuth
    2.0</title>

    <author fullname="Thomas Hardjono" initials="T" role="editor"
            surname="Hardjono">
      <organization>MIT</organization>

      <address>
        <email>hardjono@mit.edu</email>
      </address>
    </author>

    <date day="26" month="June" year="2013" />

    <abstract>
      <t>User-Managed Access (UMA) is a profile of OAuth 2.0. UMA defines how
      resource owners can control protected-resource access by clients
      operated by arbitrary requesting parties, where the resources reside on
      any number of resource servers, and where a centralized authorization
      server governs access based on resource owner policy.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="introduction" title="Introduction">
      <t>User-Managed Access (UMA) is a profile of OAuth 2.0 <xref
      target="OAuth2"></xref>. UMA defines how resource owners can control
      protected-resource access by clients operated by arbitrary requesting
      parties, where the resources reside on any number of resource servers,
      and where a centralized authorization server governs access based on
      resource owner policy. Resource owners configure authorization servers
      with access policies that serve as implicit authorization grants. Thus,
      the UMA profile of OAuth can be considered to encompass an authorization
      grant flow.</t>

      <t>UMA serves numerous use cases where a resource owner outsources
      authorization for access to their resources, potentially even without
      the run-time presence of the resource owner. A typical example is the
      following: a web user (an end-user resource owner) can authorize a web
      app (client) to gain one-time or ongoing access to a protected resource
      containing his home address stored at a "personal data store" service
      (resource server), by telling the resource server to respect access
      entitlements issued by his chosen cloud-based authorization service
      (authorization server). The requesting party operating the client might
      be the resource owner himself, using a web or native app run by an
      e-commerce company that needs to know where to ship a purchased item, or
      it might be his friend who is using an online address book service to
      collect contact information, or it might be a survey company that uses
      an autonomous web service to compile population demographics. A variety
      of scenarios and use cases can be found in <xref
      target="UMA-usecases"></xref> and <xref
      target="UMA-casestudies"></xref>.</t>

      <t>Practical control of access among loosely coupled parties requires
      more than just messaging protocols. This specification defines only the
      technical "contract" between UMA-conforming entities; its companion
      Binding Obligations specification <xref target="UMA-obligations"></xref>
      defines the expected behaviors of parties operating and using these
      entities. Parties operating entities that claim to be UMA-conforming
      MUST provide documentation affirmatively stating their acceptance of the
      binding obligations contractual framework defined in the Binding
      Obligations specification.</t>

      <t>In enterprise settings, application access management sometimes
      involves letting back-office applications serve only as policy
      enforcement points (PEPs), depending entirely on access decisions coming
      from a central policy decision point (PDP) to govern the access they
      give to requesters. This separation eases auditing and allows policy
      administration to scale in several dimensions. UMA makes use of a
      separation similar to this, letting the resource owner serve as a policy
      administrator crafting authorization strategies for resources under
      their control.</t>

      <t>In order to increase interoperable communication among the
      authorization server, resource server, and client, UMA defines several
      purpose-built APIs related to the outsourcing of authorization,
      themselves protected by OAuth in embedded fashion.</t>

      <t>The UMA protocol has three broad phases, as shown in <xref
      target="UMA-phases"></xref>.</t>

      <figure align="center" anchor="UMA-phases">
        <preamble>The Three Phases of the UMA Profile of OAuth</preamble>

        <artwork align="left"><![CDATA[                                           +--------------+
                                           |   resource   |
          +---------manage (A)------------ |     owner    |
          |                                +--------------+
          |         Phase 1:                      |
          |         protect a                control (B)
          |         resource                      |
          v                                       v
   +------------+               +----------+--------------+
   |            |               |protection|              |
   |  resource  |               |   API    | authorization|
   |   server   |<-protect (C)--|  (needs  |    server    |
   |            |               |   PAT)   |              |
   +------------+               +----------+--------------+
   | protected  |                          | authorization|
   | resource   |                          |     API      |
   |(needs RPT) |                          |  (needs AAT) |
   +------------+                          +--------------+
          ^                                       |
          |         Phases 2 and 3:         authorize (D)
          |         get authorization,            |
          |         access a resource             v
          |                                +--------------+
          +---------access (E)-------------|    client    |
                                           +--------------+

                                           requesting party
]]></artwork>
      </figure>

      <t>The phases work as follows: <list style="hanging">
          <t hangText="Protect a resource">(Described in <xref
          target="protecting-a-resource"></xref>.) The resource owner, who
          manages online resources at the resource server ("A"), introduces it
          to the authorization server so that the latter can begin controlling
          the resources' protection. To accomplish this protection, the
          authorization server presents a protection API ("C") to the resource
          server. This API is OAuth-protected and requires a protection API
          token (PAT) for access. The API consists of an OAuth resource set
          registration endpoint as defined by <xref
          target="OAuth-resource-reg"></xref>, an endpoint for registering
          client-requested permissions, and an OAuth token introspection
          endpoint as defined by <xref target="OAuth-introspection"></xref>.
          Out of band, the resource owner configures the authorization server
          with policies associated with the registered resource sets
          ("B").</t>

          <t hangText="Get authorization">(Described in <xref
          target="getting-authz-accessing-resource"></xref>.) The client
          approaches the resource server seeking access to a protected
          resource. In order to access it successfully, the client must first
          use the authorization server's authorization API ("D") to obtain a
          requesting party token (RPT) on behalf of its requesting party, and
          the requesting party must supply to the authorization server any
          identity claims needed in order for the server to associate
          sufficient authorization data with that RPT. The API is
          OAuth-protected and requires an authorization API token (AAT) for
          access. The API consists of an RPT issuance endpoint and an
          authorization request endpoint.</t>

          <t hangText="Access a resource">(Described along with Phase 2 in
          <xref target="getting-authz-accessing-resource"></xref>.) The client
          successfully presents an RPT that has sufficient authorization data
          associated with it to the resource server, gaining access to the
          desired resource ("E"). In this sense, this phase is the "happy
          path" within phase 2. The nature of the authorization data varies
          according to the RPT profile in use.</t>
        </list></t>

      <t>Implementers are anticipated to develop profiles (see <xref
      target="profiles"></xref>) that specify and restrict various UMA
      protocol, RPT, and identity claim options, according to deployment and
      usage conditions.</t>

      <section title="Notational Conventions">
        <t>The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT',
        'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in this
        document are to be interpreted as described in <xref
        target="RFC2119"></xref>.</t>

        <t>Unless otherwise noted, all the protocol properties and values are
        case sensitive.</t>
      </section>

      <section anchor="terminology" title="Terminology">
        <t>UMA introduces the following new terms and enhancements of OAuth
        term definitions.<list hangIndent="6" style="hanging">
            <t hangText="resource owner"><vspace />An OAuth resource that is
            the "user" in User-Managed Access. This is typically an end-user
            (a natural person) but it can also be a corporation or other legal
            person.</t>

            <t hangText="requesting party"><vspace />An end-user, or a
            corporation or other legal person, that uses a client to seek
            access to a protected resource. The requesting party may or may
            not be the same party as the resource owner.</t>

            <t hangText="client"><vspace />An application making protected
            resource requests with the resource owner's authorization and on
            the requesting party's behalf.</t>

            <t hangText="claim"><vspace />A statement of the value or values
            of one or more identity attributes of a requesting party. A
            requesting party may need to provide claims to an authorization
            server in order to satisfy policy and gain permission for access
            to a protected resource.</t>

            <t hangText="resource set">A set of one or more protected
            resources. In authorization policy terminology, a resource set is
            the "object" being protected.</t>

            <t hangText="scope">A bounded extent of access that is possible to
            perform on a resource set. In authorization policy terminology, a
            scope is one of the potentially many "verbs" that can logically
            apply to a resource set ("object"). UMA associates scopes with
            labeled resource sets.</t>

            <t hangText="authorization data">Data associated with a requesting
            party token that enables some combination of the authorization
            server and resource server to determine the correct extent of
            access to allow to a client. Authorization data is a key part of
            the definition of an RPT profile.</t>

            <t hangText="permission">A scope of access over a particular
            resource set at a particular resource server that is being
            requested by, or granted to, a requesting party. In authorization
            policy terminology, a permission is an entitlement that includes a
            "subject" (requesting party), "verbs" (one or more scopes of
            access), and an "object" (resource set). A permission is one
            example of authorization data that an authorization server may
            issue.</t>

            <t hangText="permission ticket">A correlation handle that is
            conveyed from an authorization server to a resource server, from a
            resource server to a client, and ultimately from a client to an
            authorization server, to enable the authorization server to assess
            the correct resource owner policies to apply to a request for an
            authorization grant.</t>
          </list></t>
      </section>

      <section anchor="endpoint-discussion" title="APIs and Protection">
        <t>UMA involves three APIs, all of which are protected.</t>

        <t>The authorization server has the opportunity to manage the validity
        periods of access tokens that it issues, their corresponding refresh
        tokens where applicable, the individual data components associated
        with RPTs where applicable, and even the client credentials that it
        issues. Different time-to-live strategies may be suitable for
        different resources and scopes of access, and the authorization server
        has the opportunity to give the resource owner control over lifetimes
        of tokens and authorization data issued on their behalf through
        policy. These options are all outside the scope of this
        specification.</t>

        <section title="Protection and Authorization APIs at the Authorization Server">
          <t>The authorization server presents a protection API to the
          resource server and an authorization API to the client. These APIs
          MUST be OAuth-protected; thus, the authorization server has an OAuth
          token endpoint and user authorization endpoint, and has the option
          to issue an OAuth refresh token along with any access tokens issued
          for these APIs.</t>

          <t>The protection API consists of an OAuth resource set registration
          endpoint as defined by <xref target="OAuth-resource-reg"></xref>, an
          endpoint for registering client-requested permissions, and an OAuth
          token introspection endpoint as defined by <xref
          target="OAuth-introspection"></xref>. This specification profiles
          the endpoints defined by these other specifications.</t>

          <t>The authorization API consists of an RPT issuance endpoint and an
          authorization request endpoint.</t>

          <t>All endpoint URIs SHOULD require the use of a transport-layer
          security mechanism such as TLS. The authorization server MUST
          declare all of its endpoints in its configuration data (see <xref
          target="am-endpoints"></xref>).</t>

          <t>An entity seeking protection API access MUST request the scope
          "http://docs.kantarainitiative.org/uma/scopes/prot.json", and an
          access token with at least this scope is called a protection API
          token (PAT). An entity seeking authorization API access MUST request
          the scope "http://docs.kantarainitiative.org/uma/scopes/authz.json",
          and an access token with at least this scope is called an
          authorization API token (AAT). The same entity can serve in both
          roles, so that an OAuth access token might be considered both a PAT
          and an AAT if it has both scopes. If a request to an endpoint fails
          due to an invalid, missing, or expired PAT or AAT, or requires
          higher privileges at this endpoint than provided by the PAT or AAT,
          the authorization server responds with an OAuth error.</t>

          <t>Note: These scope keywords are URIs that resolve to JSON-encoded
          scope descriptions, as defined in <xref
          target="OAuth-resource-reg"></xref>. These scope descriptions are
          non-normative for the purposes of PATs and AATs.</t>

          <t>The authorization server is REQUIRED to support the OAuth bearer
          token profile for PAT and AAT issuance, and MAY support other OAuth
          token profiles for these purposes. It MUST declare all supported
          token profiles for PAT and AAT issuance in its configuration data.
          The authorization server MAY support the use of any OAuth grant type
          for PAT and AAT issuance, but MUST support the authorization_code
          grant type, and SHOULD support the SAML bearer token grant type
          <xref target="OAuth-SAML"></xref>
          (urn:ietf:params:oauth:grant-type:saml2-bearer) if it anticipates
          working with entities that are operating in environments where the
          use of SAML is prevalent. It MUST declare its supported grant types
          for PAT and AAT issuance in its configuration data.</t>

          <t>A PAT binds a resource owner, a resource server the owner uses
          for resource management, and an authorization server the owner uses
          for protection of resources at this resource server. It is not
          specific to any client or requesting party. The issuance of a PAT
          represents the approval of the resource owner for this resource
          server to trust this authorization server for protecting its
          resources belonging to this resource owner.</t>

          <t>An AAT binds a requesting party, a client being used by that
          party, and an authorization server that protects resources this
          client is seeking access to on this requesting party's behalf. It is
          not specific to any resource server or resource owner. The issuance
          of an AAT represents the approval of this requesting party for this
          client to engage with this authorization server to supply claims,
          ask for authorization, and perform any other tasks needed for
          obtaining authorization for access to resources at all resource
          servers that use this authorization server. The authorization server
          is able to manage future processes of authorization and
          claims-caching efficiently for this client/requesting party pair
          across all resource servers they try to access. These management
          processes are outside the scope of this specification, however.</t>
        </section>

        <section title="API at the Resource Server">
          <t>The resource server presents one or more protected resource
          endpoints to the client; these endpoints are protected by the UMA
          profile of OAuth and require a requesting party token (RPT) with
          sufficient authorization data for access. This specification defines
          one RPT profile, call "bearer" (see <xref
          target="uma-bearer-token-profile"></xref>), which is REQUIRED for
          the authorization server to support. It MAY support additional RPT
          profiles. It MUST declare all supported RPT profiles in its
          configuration data.</t>

          <t>An RPT represents a binding of a requesting party, the client
          being used by that party, the resource server at which protected
          resources of interest reside, and the authorization server that
          protects those resources. It is not specific to a single resource
          owner, though its internal components are likely to be bound to
          individual resource owners, depending on the RPT profile in use.</t>
        </section>
      </section>

      <section anchor="am-endpoints"
               title="Authorization Server Configuration Data">
        <t>The authorization server MUST provide configuration data in a JSON
        <xref format="default" target="RFC4627"></xref> document that resides
        in an /uma-configuration directory at at its hostmeta <xref
        target="hostmeta"></xref> location. The configuration data documents
        conformance options and endpoints supported by the authorization
        server. (At the appropriate time, this section will instead profile
        whatever self-describing metadata specification OAuth adopts, for
        example, <xref target="OAuth-linktypes"></xref> or <xref
        target="OAuth-meta"></xref>.)</t>

        <t>The configuration data has the following properties.<list
            hangIndent="6" style="hanging">
            <t hangText="version"><vspace />REQUIRED. The version of the UMA
            core protocol to which this authorization server conforms. The
            value MUST be the string "1.0".</t>

            <t hangText="issuer"><vspace />REQUIRED. A URI indicating the
            party operating the authorization server.</t>

            <t hangText="pat_profiles_supported"><vspace />REQUIRED. Access
            token profiles supported by this authorization server for PAT
            issuance. The property value is an array of string values, where
            each string value is either a reserved keyword defined in this
            specification or a URI identifying an access token profile defined
            elsewhere. The reserved keyword "bearer" as a value for this
            property stands for the OAuth bearer token profile <xref
            target="OAuth-bearer"></xref>. The authorization server is
            REQUIRED to support this profile, and to supply this string value
            explicitly. The authorization server MAY declare its support for
            additional access token profiles for PATs.</t>

            <t hangText="aat_profiles_supported"><vspace />REQUIRED. Access
            token profiles supported by this authorization server for AAT
            issuance. The property value is an array of string values, where
            each string value is either a reserved keyword defined in this
            specification or a URI identifying an access token profile defined
            elsewhere. The reserved keyword "bearer" as a value for this
            property stands for the OAuth bearer token profile <xref
            target="OAuth-bearer"></xref>. The authorization server is
            REQUIRED to support this profile, and to supply this string value
            explicitly. The authorization server MAY declare its support for
            additional access token profiles for AATs.</t>

            <t hangText="rpt_profiles_supported"><vspace />REQUIRED. Access
            token profiles supported by this authorization server for RPT
            issuance. The property value is an array of string values, where
            each string value is either a reserved keyword defined in this
            specification or a URI identifying an access token profile defined
            elsewhere. The reserved keyword "bearer" as a value for this
            property stands for the UMA bearer RPT profile defined in <xref
            target="OAuth-bearer"></xref>. The authorization server is
            REQUIRED to support this profile, and to supply this string value
            explicitly. The authorization server MAY declare its support for
            additional access token profiles for RPTs.</t>

            <t hangText="pat_grant_types_supported"><vspace />REQUIRED. OAuth
            grant types supported by this authorization server in issuing
            PATs. The property value is an array of string values. Each string
            value MUST be one of the grant_type values defined in <xref
            target="OAuth2"></xref>, or alternatively a URI identifying a
            grant type defined elsewhere.</t>

            <t hangText="aat_grant_types_supported"><vspace />REQUIRED. OAuth
            grant types supported by this authorization server in issuing
            AATs. The property value is an array of string values. Each string
            value MUST be one of the grant_type values defined in <xref
            target="OAuth2"></xref>, or alternatively a URI identifying a
            grant type defined elsewhere.</t>

            <t hangText="claim_profiles_supported"><vspace />OPTIONAL. Claim
            formats and associated sub-protocols for gathering claims from
            requesting parties, as supported by this authorization server. The
            property value is an array of string values, which each string
            value is either a reserved keyword defined in this specification
            or a URI identifying a claim profile defined elsewhere. The
            reserved keyword "openid" as a value for this property stands for
            the UMA OpenID Connect claim profile defined in <xref
            target="trusted-claims"></xref>.</t>

            <t hangText="dynamic_client_endpoint"><vspace />OPTIONAL. The
            endpoint to use for performing dynamic client registration. Usage
            is defined by <xref target="DynClientReg"></xref>. The presence of
            this property indicates authorization server support for the
            dynamic client registration feature and its absent indicates a
            lack of support.</t>

            <t hangText="token_endpoint"><vspace />REQUIRED. The endpoint URI
            at which the resource server or client asks the authorization
            server for a PAT or AAT, respectively. A requested scope of
            "http://docs.kantarainitiative.org/uma/scopes/prot.json" results
            in a PAT. A requested scope of
            "http://docs.kantarainitiative.org/uma/scopes/authorization"
            results in an AAT. Usage is defined by <xref
            target="OAuth2"></xref>.</t>

            <t hangText="user_endpoint"><vspace />REQUIRED. The endpoint URI
            at which the resource server gathers the consent of the end-user
            resource owner or the client gathers the consent of the end-user
            requesting party, if the "authorization_code" grant type is used.
            Usage is defined by <xref target="OAuth2"></xref>.</t>

            <t hangText="introspection_endpoint"><vspace />REQUIRED. The
            endpoint URI at which the resource server introspects an RPT
            presented to it by a client. Usage is defined by <xref
            target="OAuth-introspection"></xref> and <xref
            target="token-introspection"></xref>. A valid PAT MUST accompany
            requests to this protected endpoint.</t>

            <t
            hangText="resource_set_registration_endpoint"><vspace />REQUIRED.
            The endpoint URI at which the resource server registers resource
            sets to put them under authorization manager protection. Usage is
            defined by <xref target="OAuth-resource-reg"></xref> and <xref
            target="protecting-a-resource"></xref>. A valid PAT MUST accompany
            requests to this protected endpoint.</t>

            <t hangText="permission_registration_endpoint"><vspace />REQUIRED.
            The endpoint URI at which the resource server registers a
            client-requested permission with the authorization server. Usage
            is defined by <xref target="h-am-register-permission"></xref>. A
            valid PAT MUST accompany requests to this protected endpoint.</t>

            <t hangText="rpt_endpoint"><vspace />REQUIRED. The endpoint URI at
            which the client asks the authorization server for an RPT. Usage
            is defined by <xref target="authz-permission-token"></xref>. A
            valid AAT MUST accompany requests to this protected endpoint.</t>

            <t hangText="authorization_request_endpoint"><vspace />REQUIRED.
            The endpoint URI at which the client asks to have authorization
            data associated with its RPT. Usage is defined in <xref
            target="r-am-authz-scope"></xref>. A valid AAT MUST accompany
            requests to this protected endpoint.</t>
          </list></t>

        <figure>
          <preamble>Example of authorization server configuration data that
          resides at https://example.com/.well-known/uma-configuration (note
          the use of https: for endpoints throughout):</preamble>

          <artwork><![CDATA[{
"version":"1.0",
"issuer":"https://example.com",
"pat_profiles_supported":["bearer"],
"aat_profiles_supported":["bearer"],
"rpt_profiles_supported":["bearer"],
"pat_grant_types_supported":["authorization_code"],
"aat_grant_types_supported":["authorization_code"],
"claim_profiles_supported":["openid"],
"dynamic_client_endpoint":"https://as.example.com/dyn_client_reg_uri",
"token_endpoint":"https://as.example.com/token_uri",
"user_endpoint":"https://as.example.com/user_uri",
"resource_set_registration_endpoint":"https://as.example.com/rs/rsrc_uri",
"introspection_endpoint":"https://as.example.com/rs/status_uri",
"permission_registration_endpoint":"https://as.example.com/rs/perm_uri",
"rpt_endpoint":"https://as.example.com/client/rpt_uri",
"authorization_request_endpoint":"https://as.example.com/client/perm_uri"
}]]></artwork>
        </figure>

        <t>Authorization server configuration data MAY contain extension
        properties that are not defined in this specification. Extension names
        that are unprotected from collisions are outside the scope of this
        specification.</t>
      </section>
    </section>

    <section anchor="protecting-a-resource" title="Protecting a Resource">
      <t>The resource owner, resource server, and authorization server perform
      the following actions to put resources under protection. This list
      assumes that the resource server has discovered the authorization
      server's configuration data and endpoints as needed.<list
          style="numbers">
          <t>The authorization server issues client credentials to the
          resource server. It is OPTIONAL for the client credentials to be
          provided dynamically through <xref target="DynClientReg"></xref>);
          alternatively, they MAY use a static process.</t>

          <t>The resource server acquires a PAT from the authorization server
          in order to use the resource set registration endpoint (and later,
          other protection API endpoints). It is OPTIONAL for the resource
          owner to introduce the resource server to the authorization server
          dynamically (for example, through a "NASCAR"-style user interface
          where the resource owner selects a chosen authorization server);
          alternatively, they MAY use a static process that may or may not
          directly involve the resource owner at introduction time.</t>

          <t>In an ongoing fashion, the resource server registers any resource
          sets with the authorization server for which it intends to outsource
          protection, using the process defined by <xref
          target="OAuth-resource-reg"></xref>.</t>
        </list></t>

      <t>Note: The resource server is free to offer the option to protect any
      subset of the resource owner's resources using different authorization
      servers or other means entirely, or to protect some resources and not
      others. Additionally, the choice of protection regimes can be made
      explicitly by the resource owner or implicitly by the resource server.
      Any such partitioning by the resource server or owner is outside the
      scope of this specification.</t>

      <t>Once a resource set has been placed under authorization server
      protection through the registration of a resource set description for
      it, and until such a description's deletion by the resource server, the
      resource server MUST limit access to corresponding resources, respecting
      authorization data associated with client-presented RPTs by the
      authorization server as appropriate (see <xref
      target="client-presents-rpt"></xref>).</t>
    </section>

    <section anchor="getting-authz-accessing-resource"
             title="Getting Authorization and Accessing a Resource">
      <t>An authorization server orchestrates and controls clients' access (on
      their requesting parties' behalf) to a resource owner's protected
      resources at a resource server, under conditions dictated by that
      resource owner.</t>

      <t>The process of getting authorization and accessing a resource always
      begins with the client attempting access at a protected resource
      endpoint at the resource server. How the client came to learn about this
      endpoint is out of scope for this specification. The resource owner
      might, for example, have advertised its availability publicly on a blog
      or other website, listed it in a discovery service, or emailed a link to
      a particular intended requesting party.</t>

      <t>The resource server responds to the client's access request with
      whatever its application-specific interface defines as a success
      response, either immediately or having first performed one or more
      embedded interactions with the authorization server. Depending on the
      nature of the resource server's response to an failed access attempt,
      the client and its requesting party engage in embedded interactions with
      the authorization server before re-attempting access.</t>

      <t>The interactions are as follows. Each interaction MAY be the last, if
      the client chooses not to continue pursuing the access attempt or the
      resource server chooses not to continue facilitating it.<list
          style="symbols">
          <t>The client attempts to access a protected resource.<list
              style="symbols">
              <t>If the access attempt is unaccompanied by an RPT, the
              resource server responds immediately with an HTTP 401
              (Unauthorized) response and instructions on where to go to
              obtain one.</t>

              <t>If the access attempt was accompanied by an RPT, the resource
              server checks the RPT's status.<list style="symbols">
                  <t>If the RPT is invalid, the resource server responds with
                  an HTTP 401 (Unauthorized) response and instructions on
                  where to go to obtain a token.</t>

                  <t>If the RPT is valid but has insufficient authorization
                  data, the resource server registers a suitable requested
                  permission on the client's behalf at the authorization
                  server, and then responds to the client with an HTTP 403
                  (Forbidden) response and instructions on where to go to ask
                  for authorization.</t>

                  <t>If the RPT is valid, and if the authorization data
                  associated with the token is sufficient for allowing access,
                  the resource server responds with an HTTP 2xx (Success)
                  response and a representation of the resource.</t>
                </list></t>
            </list></t>

          <t>If the client (possessing no RPT or an invalid RPT) received a
          401 response and an authorization server's location, after looking
          up its configuration data and endpoints as necessary, it requests an
          RPT from the RPT endpoint.</t>

          <t>If the client (posessing a valid RPT) received a 403 response and
          a permission ticket, it asks the authorization server for
          authorization data that matches the ticket. If the authorization
          server needs requesting party claims in order to assess this
          client's authorization, it engages in a claims-gathering flow with
          the requesting party.<list style="symbols">
              <t>If the client does not already have an AAT at the appropriate
              authorization server to be able to use its authorization API, it
              first obtains one.</t>
            </list></t>
        </list></t>

      <t>The interactions are described in detail in the following
      sections.</t>

      <section anchor="r-h-attempt-access"
               title="Client Attempts to Access Protected Resource">
        <t>This interaction assumes that the resource server has previously
        registered one or more resource sets that correspond to the resource
        to which access is being attempted.</t>

        <t>The client attempts to access a protected resource (for example,
        when an end-user requesting party clicks on a thumbnail representation
        of the resource to retrieve a larger version). It is expected to
        discover, or be provisioned or configured with, knowledge of the
        protected resource and its location out of band. Further, the client
        is expected to acquire its own knowledge about the
        application-specific methods made available by the resource server for
        operating on this protected resource (such as viewing it with a GET
        method, or transforming it with some complex API call) and the
        possible scopes of access.</t>

        <t>The access attempt either is or is not accompanied by an RPT.</t>

        <section anchor="no-rpt" title="Client Presents No RPT">
          <figure>
            <preamble>Example of a request carrying no RPT:</preamble>

            <artwork><![CDATA[
GET /album/photo.jpg HTTP/1.1
Host: photoz.example.com
...
]]></artwork>
          </figure>

          <t>If the client does not present an RPT with the request, the
          resource server MUST return an HTTP 401 (Unauthorized) status code,
          along with providing the authorization server's URI in an "as_uri"
          property to facilitate authorization server configuration data
          discovery, including discovery of the endpoint where the client can
          request an RPT (<xref target="authz-permission-token"></xref>).</t>

          <figure>
            <preamble>For example:</preamble>

            <artwork><![CDATA[
HTTP/1.1 401 Unauthorized
   WWW-Authenticate: UMA realm="example",
    host_id="photoz.example.com",
    as_uri="https://as.example.com"
   ...
]]></artwork>
          </figure>
        </section>

        <section anchor="client-presents-rpt" title="Client Presents RPT">
          <figure>
            <preamble>Example of a request carrying an RPT using the UMA
            bearer RPT profile:</preamble>

            <artwork><![CDATA[
GET /album/photo.jpg HTTP/1.1
Authorization: Bearer vF9dft4qmT
Host: photoz.example.com
...
]]></artwork>
          </figure>

          <t>If the client presents an RPT with its request, the resource
          server MUST determine the RPT's status (see <xref
          target="h-am-rpt-status"></xref>) before responding.</t>

          <t>If the RPT is invalid, the resource server MUST return an HTTP
          401 (Unauthorized) status code, along with providing the
          authorization server's URI in an "as_uri" property in the header,
          similarly to the case where no RPT was presented.</t>

          <t>If the RPT is valid but has insufficient authorization data for
          the type of access sought, the resource server SHOULD register a
          requested permission with the authorization server that would
          suffice for that scope of access (see <xref
          target="h-am-register-permission"></xref>), and then respond with
          the HTTP 403 (Forbidden) status code, along with providing the
          authorization server's URI in an "as_uri" property in the header,
          and the permission ticket it just received from the AM in the body
          in a JSON-encoded "ticket" property.</t>

          <figure>
            <preamble>Example of the host's response after having registered a
            requested permission and received a ticket:</preamble>

            <artwork><![CDATA[
HTTP/1.1 403 Forbidden
WWW-Authenticate: UMA realm="example",
  host_id="photoz.example.com",
  as_uri="https://as.example.com"
  error="insufficient_scope"

{
"ticket": "016f84e8-f9b9-11e0-bd6f-0021cc6004de"
}
]]></artwork>
          </figure>

          <t>If the RPT's status is associated with authorization data that is
          consistent with authorized access of the scope sought by the client,
          the resource server MUST give access to the desired resource.</t>

          <figure>
            <preamble>Example of the resource server's response after having
            determineed that the RPT is valid and associated with sufficient
            authorization data:</preamble>

            <artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: image/jpeg
...

/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja
3kAAQAEAAAAPAAA/+4ADkFkb2JlAGTAAAAAAf
/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAo
KCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwb
]]></artwork>
          </figure>

          <t>The resource server MUST NOT give access where the token's status
          is not associated with sufficient authorization data for the
          attempted scope of access.</t>
        </section>
      </section>

      <section anchor="h-am-register-permission"
               title="Resource Server Registers Requested Permission With Authorization Server">
        <t>In response to receiving an access request accompanied by an RPT
        that has insufficient authorization data, the resource server
        registers a permission with the authorization server that would be
        sufficient for the type of access sought. The authorization server
        returns a permission ticket for the resource server to give to the
        client in its response.</t>

        <t>The resource server MUST provide its valid PAT in order to get
        access to this endpoint. Note that this PAT implicitly identifies the
        resource owner ("subject") to which the permission applies.</t>

        <t>The permission ticket is a short-lived opaque structure whose form
        is determined by the authorization server. The ticket value MUST be
        securely random (for example, not merely part of a predictable
        sequential series), to avoid denial-of-service attacks. Since the
        ticket is an opaque structure from the point of view of the client,
        the authorization server is free to include information regarding
        expiration time within the opaque ticket for its own consumption. When
        the client subsequently asks the authorization server for
        authorization data to be associated with its RPT, it will submit this
        ticket to the authorization server.</t>

        <t>The resource server registers the requested permission using the
        POST method at the authorization server's permission registration
        endpoint. The resource server MUST provide its valid PAT in order to
        get access to this endpoint. The body of the HTTP request message
        contains a JSON object providing the requested permission, using a
        format derived from the scope description format specified in <xref
        target="OAuth-resource-reg"></xref>, as follows. The object has the
        following properties:<list style="hanging">
            <t hangText="resource_set_id">REQUIRED. The identifier for a
            resource set to which this client is seeking access. The
            identifier MUST correspond to a resource set that was previously
            registered.</t>

            <t hangText="scopes">REQUIRED. An array referencing one or more
            identifiers of scopes to which access is needed for this resource
            set. Each scope identifier MUST correspond to a scope that was
            registered by this resource server for the referenced resource
            set.</t>
          </list></t>

        <figure>
          <preamble>Example of an HTTP request that registers a requested
          permission at the authorization server's permission registration
          endpoint:</preamble>

          <artwork><![CDATA[
POST /host/scope_reg_uri/photoz.example.com HTTP/1.1
Content-Type: application/json
Host: as.example.com

{
  "resource_set_id": "112210f47de98100",
  "scopes": [
      "http://photoz.example.com/dev/actions/view",
      "http://photoz.example.com/dev/actions/all"
  ]
}
]]></artwork>
        </figure>

        <t>If the registration request is successful, the authorization server
        responds with an HTTP 201 (Created) status code and includes the
        Location header in its response as well as the "ticket" property in
        the JSON-formatted body.</t>

        <figure>
          <preamble>For example:</preamble>

          <artwork><![CDATA[
HTTP/1.1 201 Created
Content-Type: application/json
Location: https://as.example.com/permreg/host/photoz.example.com/5454345rdsaa4543
...

{
"ticket": "016f84e8-f9b9-11e0-bd6f-0021cc6004de"
}
]]></artwork>
        </figure>

        <t>If the registration request is authenticated properly but fails due
        to other reasons, the authorization server responds with an HTTP 400
        (Bad Request) status code and includes one of the following UMA error
        codes (see <xref target="uma-error-response"></xref>):<list
            style="hanging">
            <t hangText="invalid_resource_set_id">The provided resource set
            identifier was not found at the authorization server.</t>

            <t hangText="invalid_scope">At least one of the scopes included in
            the request was not registered previously by this resource
            server.</t>
          </list></t>
      </section>

      <section anchor="h-am-rpt-status"
               title="Resource Server Determines RPT's Status">
        <t>The resource server determines a received RPT's status, including
        both its validity and, if valid, its associated authorization data,
        before giving or refusing access to the client. An RPT is associated
        with a set of authorization data that governs whether the client is
        authorized for access. The token's nature and format are dictated by
        its profile; the profile might allow it to be self-contained, such
        that the resource server is able to determine its status locally, or
        might require or allow the resource server to make a run-time
        introspection request of the authorization server that issued the
        token.</t>

        <t>This specification makes one type of RPT mandatory to implement:
        the UMA bearer token profile, as defined in <xref
        target="uma-bearer-token-profile"></xref>. Implementers MAY define and
        use other RPT profiles.</t>

        <section anchor="token-introspection" title="Token Introspection">
          <t>Within any RPT profile, when a resource server needs to
          introspect a token in a non-self-contained way to determine its
          status, it MUST use the authorization server's OAuth introspection
          endpoint, defined by <xref target="OAuth-introspection"></xref>. Any
          UMA token profile MAY require, allow, or prohibit use of the token
          introspection endpoint, and MAY profile its usage. The authorization
          server MUST OAuth-protect this endpoint and require a PAT from the
          resource server for access to it. The resource server MUST use the
          POST method in interacting with the endpoint, not the GET method
          also defined by <xref target="OAuth-introspection"></xref>.</t>
        </section>

        <section anchor="uma-bearer-token-profile" title="RPT Profile: Bearer">
          <t>This section defines the UMA bearer token profile. Following is a
          summary:<list style="symbols">
              <t>Identifying URI:
              http://docs.kantarainitiative.org/uma/profiles/uma-token-bearer-1.0</t>

              <t>Profile author and contact information: Thomas Hardjono
              (hardjono@mit.edu)</t>

              <t>Updates or obsoletes: None; this profile is new.</t>

              <t>Keyword in HTTP Authorization header: "Bearer".</t>

              <t>Syntax and semantics of token data: As defined below. The
              token data format mainly involves time-bounded permissions.</t>

              <t>Token data association: The data associated to the
              on-the-wire token by reference and retrieved at run time by the
              resource server through profiled use of the OAuth token
              introspection endpoint <xref
              target="OAuth-introspection"></xref>, as defined below.</t>

              <t>Token data processing: As defined in this section and
              throughout <xref
              target="getting-authz-accessing-resource"></xref> of this
              specification.</t>

              <t>Grant type restrictions: None.</t>

              <t>Error states: As defined below.</t>

              <t>Security and privacy considerations: As defined in this
              section and throughout <xref
              target="getting-authz-accessing-resource"></xref> of this
              specification.</t>

              <t>Binding obligations: Because this RPT profile is mandatory
              for authorization servers to implement, binding obligations
              related to the use of this token profile are documented in <xref
              target="UMA-obligations"></xref>.</t>
            </list></t>

          <t>On receiving an RPT of the "Bearer" type in an authorization
          header from a client making an access attempt, the resource server
          MUST introspect the token by using the authorization server's token
          introspection endpoint. The PAT used by the resource server to make
          the introspection request provides resource-owner context to the
          authorization server.</t>

          <t>The authorization server responds with a JSON object with the
          structure dictated by <xref target="OAuth-introspection"></xref>. If
          the valid property has a "true" value, then the JSON object MUST
          also contain an extension property with the name "permissions" that
          contains an array of zero or more values, each of which is an object
          consisting of these properties:<list style="hanging">
              <t hangText="resource_set_id">REQUIRED. A string that uniquely
              identifies the resource set, access to which has been granted to
              this client on behalf of this requesting party. The identifier
              MUST correspond to a resource set that was previously registered
              as protected.</t>

              <t hangText="scopes">REQUIRED. An array referencing one or more
              URIs of scopes to which access was granted for this resource
              set. Each scope MUST correspond to a scope that was registered
              by this host for the referenced resource set.</t>

              <t hangText="expires_at">REQUIRED. Integer timestamp, measured
              in the number of seconds since January 1 1970 UTC, indicating
              when this permission will expire.</t>

              <t hangText="issued_at">OPTIONAL. Integer timestamp, measured in
              the number of seconds since January 1 1970 UTC, indicating when
              this permission was originally issued.</t>
            </list></t>

          <figure>
            <preamble>Example:</preamble>

            <artwork><![CDATA[
HTTP/1.1 200 OK
   Content-Type: application/json
   Cache-Control: no-store

   {
    "valid": true,
    "expires_at": "1256953732",
    "issued_at": "1256912345",
    "permissions": [
      {
        "resource_set_id": "112210f47de98100",
        "scopes": [
          "http://photoz.example.com/dev/actions/view",
          "http://photoz.example.com/dev/actions/all"
         ],
        "expires_at" : "1256923456"
      }
    ]
   }
]]></artwork>
          </figure>
        </section>
      </section>

      <section anchor="r-am-obtain-permission"
               title="Client Seeks Authorization for Access">
        <t>In order to access a protected resource successfully, a client
        needs to present a valid RPT with sufficient authorization data for
        access. To get to this stage requires a number of previously
        successful steps:<list style="numbers">
            <t>The authorization server issues client credentials to the
            client. It is OPTIONAL for the client credentials to be provided
            dynamically through <xref target="DynClientReg"></xref>);
            alternatively, they MAY use a static process.</t>

            <t>The client acquires an AAT. This enables it to use
            authorization API endpoints.</t>

            <t>The client acquires an RPT from the RPT endpoint. See <xref
            target="authz-permission-token"></xref> for more detail.</t>

            <t>The client asks for authorization at the authorization request
            endpoint, providing the permission ticket it got from the resource
            server. The authorization server associates authorization data
            with the client's RPT based on the permission ticket, the resource
            owner's operative policies, and the results of any
            claims-gathering flows with the requesting party. See <xref
            target="r-am-authz-scope"></xref> for more detail.</t>
          </list></t>

        <section anchor="authz-permission-token" title="Client Obtains RPT">
          <t>The client might need an RPT if it has never before requested an
          RPT for this combination of requesting party, resource server, and
          authorization server, or if it has lost control of a previously
          issued RPT and needs a refreshed one. It obtains an RPT by
          performing a POST on the RPT endpoint. It MUST provide its own valid
          AAT in the header.</t>

          <figure>
            <preamble>Example of a request message containing an
            AAT:</preamble>

            <artwork><![CDATA[POST /rpt HTTP/1.1
Host: as.example.com
Authorization: Bearer jwfLG53^sad$#f
...
]]></artwork>
          </figure>

          <t>The authorization server responds with an HTTP 201 (Created)
          status code and provides a new RPT.</t>

          <figure>
            <preamble>For example:</preamble>

            <artwork><![CDATA[
HTTP/1.1 201 Created
Content-Type: application/json

{
  "rpt": "sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv"
}
]]></artwork>
          </figure>

          <t>If the AAT provided in the header is the same as one provided for
          a previously issued still-valid RPT by this authorization server,
          the authorization server invalidates the old RPT and issues a new
          one.</t>

          <t>On first issuance, the RPT is associated with no authorization
          data and thus does not convey any authorizations for access.</t>
        </section>

        <section anchor="r-am-authz-scope"
                 title="Client Asks for Authorization Data">
          <t>Once in possession of an AAT for this authorization server, an
          RPT that applies to this requesting party for this resource server
          and this authorization server, and a permission ticket, the client
          asks the authorization server to give it suitable authorization data
          for the sought-for access. It performs a POST on the authorization
          request endpoint, supplying its own AAT in the header and its RPT
          and the permission ticket in a JSON object with properties "rpt" and
          ticket", respectively.</t>

          <figure>
            <preamble>Example of a request message containing an AAT, an RPT,
            and a permission ticket:</preamble>

            <artwork><![CDATA[POST /token_status HTTP/1.1
Host: as.example.com
Authorization: Bearer jwfLG53^sad$#f
...

{
 "rpt": "sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv",
 "ticket": "016f84e8-f9b9-11e0-bd6f-0021cc6004de"
}]]></artwork>
          </figure>

          <t>The authorization server uses the ticket to look up the details
          of the previously registered requested permission, maps the
          requested permission to operative resource owner policies based on
          the resource set identifier and scopes in it, undergoes any
          claims-gathering flows required (see <xref
          target="authz-flows"></xref>), and ultimately responds to the
          request. The resource owner's policies at the authorization server
          amount to an implicit authorization grant in governing the issuance
          of authorization data. (The authorization server is also free to
          enable the resource owner to set policies that require the owner to
          provide a run-time authorization grant in the form of a consent
          interaction, mediated by the authorization server. This setting of
          policies and gathering of consent is outside the scope of this
          specification.)</t>

          <t>The authorization server MUST base the addition of authorization
          data to RPTs on user policies. The nature of these policies is
          outside the scope of UMA, but generally speaking, they can be
          thought of as either independent of requesting-party features (for
          example, time of day) or dependent on requesting-party features (for
          example, whether they are over 18). Such requesting-party features
          can potentially be collected in a claims-gathering flow. If the
          authorization server does not add the requested authorization data,
          it responds using the appropriate HTTP status code and UMA error
          code (see <xref target="uma-error-response"></xref>): <list
              style="hanging">
              <t hangText="invalid_ticket">The provided ticket was not found
              at the authorization server. The authorization server SHOULD
              respond with the HTTP 400 (Bad Request) status code.</t>

              <t hangText="expired_ticket">The provided ticket has expired.
              The authorization server SHOULD respond with the HTTP 400 (Bad
              Request) status code.</t>

              <t hangText="not_authorized_permission">The client is
              definitively not authorized for this authorization according to
              user policy. The authorization server SHOULD respond with the
              HTTP 403 (Forbidden) status code.</t>

              <t hangText="need_claims">The authorization server is unable to
              determine whether the client is authorized for this permission
              without gathering claims from the requesting party. The
              authorization server SHOULD respond with the HTTP 403
              (Forbidden) status code. The client is therefore not authorized,
              but has the opportunity to engage its operator -- the requesting
              party -- in a claims-gathering flow with the authorization
              server (see <xref target="authz-flows"></xref>) to continue
              seeking authorization.</t>
            </list></t>

          <figure>
            <preamble>For example:</preamble>

            <artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json
Cache-Control: no-store
...

{
  "status": "error",
  "error": "expired_ticket"
}
]]></artwork>
          </figure>
        </section>
      </section>

      <section anchor="authz-flows" title="Claims-Gathering Flows">
        <t>The process for requesting and providing claims is extensible and
        may have a variety of dependencies on the type of requesting party
        (for example, natural person or legal person) and the type of client
        (for example, browser, native app, or autonomously running web
        service). This specification provides a framework for handling
        end-user-driven clients and an optional "openid" claim profile, based
        on OpenID Connect, for gathering standardized claims from such an
        end-user. It also allows for the definition of additional claim
        profiles. The authorization server MAY support any number of claim
        profiles, and SHOULD document the claim profiles it supports its
        configuration data. For the business-level and legal implications of
        different claim profiles, see <xref
        target="UMA-obligations"></xref>.</t>

        <section anchor="trusted-claims-human-driven"
                 title="Claims-Gathering Flow for Clients Operated by End-Users">
          <t>A client, whether web-based or native, is operated by an end-user
          in one of two typical situations:<list style="symbols">
              <t>The requesting party is a natural person (for example, a
              friend of the resource owner); the requesting party may even be
              the resource owner herself.</t>

              <t>The requesting party is a legal person such as a corporation,
              and the end-user operating the client is acting as an agent of
              that legal person (for example, a customer support specialist
              representing a credit card company).</t>
            </list></t>

          <t>For convenience, this specification refers to the end-user as a
          "requesting end-user" to cover both cases, which differ only at the
          level of business agreements (and potentially law), rather than
          technology. The authorization server has a variety of options at
          this point for satisfying the resource owner's policy; this
          specification does not dictate a single answer. For example, the
          authorization server could require the requesting end-user to
          register for and/or log in to a local authorization server account,
          or fill in a questionnaire, or complete a purchase. It could even
          require several of these operations, where the order is treated as
          significant for evaluating resource owner policies. A variety of
          claim profiling can be defined to achieve these effects.</t>

          <t>An end-user-driven client MUST redirect the requesting end-user
          to the authorization server in order to continue the process of
          seeking authorization, including a URI query parameter with the name
          "ticket" whose value conveys the permission ticket for which the
          need_claims error was received; for example,
          "ticket=016f84e8-f9b9-11e0-bd6f-0021cc6004de".</t>

          <t>Each claim profile MUST provide the following capabilities:<list
              style="hanging">
              <t hangText="redirect URI">A means by which the client MUST
              supply the URI to which the authorization server MUST redirect
              the requesting end-user at the end of the claims-gathering
              process.</t>

              <t hangText="callback URI">A means by which the client
              OPTIONALLY supplies a callback URI for the authorization server
              to use.</t>

              <t hangText="state">A means by which the client SHOULD supply an
              opaque value used to maintain state between the request and the
              callback; this serves as a protection against XSRF attacks.</t>
            </list></t>

          <section anchor="trusted-claims"
                   title="OpenID Connect Claim Profile">
            <t>This section defines the OpenID Connect claim profile for UMA.
            Following is a summary:<list style="symbols">
                <t>Identifying URI:
                http://docs.kantarainitiative.org/uma/profiles/uma-claim-openid-1.0</t>

                <t>Profile author and contact information: Thomas Hardjono
                (hardjono@mit.edu)</t>

                <t>Updates or obsoletes: None; this profile is new.</t>

                <t>Syntax and semantics of claim data: As defined below. The
                claim data format leverages the OpenID Connect protocol and
                the reserved claims defined in that specification.</t>

                <t>Claims gathering method: As defined below.</t>

                <t>Error states: None additional.</t>

                <t>Security and privacy considerations: None additional.</t>

                <t>Binding obligations: Binding obligations that apply to the
                use of this claim profile are documented in <xref
                target="UMA-obligations"></xref>.</t>
              </list></t>

            <t>If an authorization server supports the OpenID Connect claim
            profile, it MUST supply the "openid" value for one of its
            "claim_profiles_supported" values in its configuration data.</t>

            <t>To conform to this option, the authorization server MUST do the
            following:<list style="symbols">
                <t>Serve as a conforming OpenID Relying Party and Claims
                Client according to <xref target="OCStandard"></xref></t>

                <t>Be able to utilize at least all of the reserved claims
                defined in <xref target="OCMessages"></xref> in evaluating
                policy and adding authorization data to RPTs</t>

                <t>Use the OpenID Connect "redirect_uri" and "state" request
                parameters as appropriate</t>
              </list></t>

            <t>The authorization server can then use any conforming OpenID
            Connect mechanisms and typical user interfaces for engaging with
            the UserInfo endpoints of OpenID Providers and Claims Providers,
            potentially allowing for the delivery of "trusted claims" (such as
            a verified email address or a date or birth) on which
            authorization policy for access may depend.</t>
          </section>
        </section>
      </section>
    </section>

    <section anchor="errors" title="Error Messages">
      <t>Ultimately the resource server is responsible for either granting the
      access the client attempted, or returning an error response to the
      client with a reason for the failure. <xref target="OAuth2"></xref>
      defines several error responses for a resource server to return. UMA
      makes use of these error responses, but requires the resource server to
      "outsource" the determination of some error conditions to the
      authorization server. This specification defines additional UMA-specific
      error responses that the authorization server may give to the resource
      server and client as they interact with it, and that the resource server
      may give to the client.</t>

      <section anchor="oauth-error-response" title="OAuth Error Responses">
        <t>When a resource server or client attempts to access one of the
        authorization server endpoints or a client attempts to access a
        protected resource at the resource server, it has to make an
        authenticated request by including an OAuth access token in the HTTP
        request as described in <xref target="OAuth2"></xref> Section 7.2.</t>

        <t>If the request failed authentication, the authorization server or
        the resource server responds with an OAuth error message as described
        throughout <xref target="protecting-a-resource"></xref> and <xref
        target="getting-authz-accessing-resource"></xref>.</t>
      </section>

      <section anchor="uma-error-response" title="UMA Error Responses">
        <t>When a resource server or client attempts to access one of the
        authorization server endpoints or a client attempts to access a
        protected resource at the resource server, if the request is
        successfully authenticated by OAuth means, but is invalid for another
        reason, the authorization server or resource server responds with an
        UMA error response by adding the following properties to the entity
        body of the HTTP response: <list style="hanging">
            <t hangText="error">REQUIRED. A single error code. Values for this
            property are defined throughout this specification.</t>

            <t hangText="error_description">OPTIONAL. Human-readable text
            providing additional information.</t>

            <t hangText="error_uri">OPTIONAL. A URI identifying a
            human-readable web page with information about the error.</t>
          </list></t>

        <t>The following is a common error code that applies to several
        UMA-specified request messages: <list style="hanging">
            <t hangText="invalid_request">The request is missing a required
            parameter, includes an invalid parameter value, includes a
            parameter more than once, or is otherwise malformed. The
            authorization server MUST respond with the HTTP 400 (Bad Request)
            status code.</t>
          </list></t>

        <figure>
          <preamble>For example:</preamble>

          <artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json
Cache-Control: no-store
...

{
  "status": "error",
  "error": "invalid_request",
  "error_description": "There is already a resource with this identifier.",
  "error_uri": "http://as.example.com/errors/resource_exists"
}
]]></artwork>
        </figure>
      </section>
    </section>

    <section anchor="profiles" title="Specificying Additional Profiles">
      <t>This specification defines a protocol that has optional features. For
      interoperability and to serve particular deployment scenarios, including
      sector-specific ones such as healthcare or e-government, third parties
      may want to define profiles of UMA that restrict these options.</t>

      <t>Further, this specification creates extensibility points for RPT
      profiles and claim profiles, and third parties may likewise want to
      define their own. Different RPT profile could be used, for example, to
      change the dividing line between authorization server and resource
      server responsibilities in controlling access. Different claim profiles
      could be used to customize sector-specific or population-specific
      (individual vs. employee) claim types that drive the types of policies
      resource owners could set.</t>

      <t>It is not practical for this specification to standardize all desired
      profiles. However, to serve overall interoperability goals, the
      following sections provide guidelines for third parties that wish to
      specify UMA-related profiles.</t>

      <section title="Specifying Profiles of UMA">
        <t>It is RECOMMENDED that profiles of UMA document the following
        information:</t>

        <t><list style="numbers">
            <t>Specify a URI that uniquely identifies the profile.</t>

            <t>Identify the responsible author and provide postal or
            electronic contact information.</t>

            <t>Supply references to previously defined profiles that the
            profile updates or obsoletes.</t>

            <t>Specify the set of interactions between endpoint entites
            involved in the profile, calling out any restrictions on ordinary
            UMA-conformant operations and any extension properties used in
            message formats.</t>

            <t>Identify the legally responsible parties involved in each
            interaction and any new obligations imposed, in the fashion of
            <xref target="UMA-obligations"></xref>.</t>

            <t>Define any additional or changed error states.</t>

            <t>Supply any additional security and privacy considerations,
            including analysis of threats and description of
            countermeasures.</t>
          </list></t>
      </section>

      <section title="Specifying RPT Profiles">
        <t>It is RECOMMENDED that RPT profiles document the following
        information:</t>

        <t><list style="numbers">
            <t>Specify a URI that uniquely identifies the token profile.</t>

            <t>Identify the responsible author and provide postal or
            electronic contact information.</t>

            <t>Supply references to previously defined token profiles that the
            token profile updates or obsoletes.</t>

            <t>Specify the keyword to be used in HTTP Authorization headers
            with tokens conforming to this profile.</t>

            <t>Specify the syntax and semantics of the data that the
            authorization server associates with the token.</t>

            <t>Specify how the token data is associated with, contained
            within, and/or retrieved by means of, the on-the-wire token
            string.</t>

            <t>Specify processing rules for token data.</t>

            <t>Identify any restrictions on grant types to be used with the
            token profile.</t>

            <t>Define any additional or changed error states.</t>

            <t>Supply any additional security and privacy considerations.</t>

            <t>Specify any obligations specific to the token profile, in the
            fashion of <xref target="UMA-obligations"></xref>.</t>
          </list></t>

        <t>See <xref target="uma-bearer-token-profile"></xref> for an
        example.</t>
      </section>

      <section title="Specifying Claim Profiles">
        <t>It is RECOMMENDED that claim profiles document the following
        information:<list style="numbers">
            <t>Specify a URI that uniquely identifies the claim profile.</t>

            <t>Identify the responsible author and provide postal or
            electronic contact information.</t>

            <t>Supply references to previously defined claim profiles that the
            claim profile updates or obsoletes.</t>

            <t>Specify the syntax and semantics of claim data and requests for
            claim data.</t>

            <t>Specify how an authorization server gathers the claims.</t>

            <t>Define any additional or changed error states.</t>

            <t>Supply any additional security and privacy considerations.</t>

            <t>Specify any obligations specific to the claim profile, in the
            fashion of <xref target="UMA-obligations"></xref>.</t>
          </list></t>

        <t>See <xref target="trusted-claims"></xref> for an example.</t>
      </section>
    </section>

    <section title="Security Considerations">
      <t>This specification relies mainly on OAuth security mechanisms as well
      as transport-level encryption for protecting the protection and
      authorization API endpoints. Most PATs and AATs are likely to use OAuth
      bearer tokens. See <xref target="OAuth-threat"></xref> for more
      information.</t>

      <t>This specification defines a number of JSON-based data formats. As a
      subset of the JavaScript scripting language, JSON data SHOULD be
      consumed through a process that does not dynamically execute it as code,
      to avoid malicious code execution. One way to achieve this is to use a
      JavaScript interpreter rather than the built-in JavaScript eval()
      function.</t>

      <t>The issue of impersonation is a crucial aspect in UMA, particularly
      when entities are wielding bearer tokens that preclude
      proof-of-possession (of a secret or a cryptographic key). As such, one
      way to mitigate this risk is for the resource owner to require stronger
      claims to accompany any access request. For example, consider the case
      where Alice sets policies at the authorization server governing access
      to her resources by Bob. When Bob first seeks access and must obtain an
      RPT (for which the default RPT profile specifies a bearer token), Alice
      could set policies demanding that Bob prove his identity by providing a
      set of strong claims issued by a trusted attrribute provider in order to
      get authorization data associated with that token.</t>

      <t>Another issue concerns the use of the <xref target="OAuth2"></xref>
      implicit flow. In this case, Bob will have exposure to the token, and
      may maliciously pass the token to an unauthorized party. To mitigate
      this weakness and others, we recommend considering the following
      steps:</t>

      <t><list style="symbols">
          <t>Require that the Requesting Party (as defined in <xref
          target="UMA-obligations"></xref>) legitimately represent the wielder
          of the bearer token. This solution is based on a legal or
          contractual approach, and therefore does not reduce the risk from
          the technical perspective.</t>

          <t>The authorization server, possibly with input from the resource
          owner, can implement tighter time-to-live (TTL) strategies around
          the authorization data in RPTs. This is a classic approach with
          bearer tokens that helps to limit a malicious party's ability to
          intercept and use the bearer token. In the same vein, the
          authorization server could require claims to have a reasonable
          degree of freshness (which would require a custom claims
          profile).</t>

          <t>The strongest strategy is to disallow bearer-type RPTs within the
          UMA profile being deployed, by providing or requiring an RPT profile
          that requires use of a holder-of-key (HOK) approach. In this way,
          the wielder of the token must engage in a live session for
          proof-of-possession.</t>
        </list></t>

      <t>For information about the additional technical, operational, and
      legal elements of trust establishment between UMA entities and parties,
      which affects security considerations, see <xref
      target="UMA-obligations"></xref>.</t>
    </section>

    <section title="Privacy Considerations">
      <t>The authorization server comes to be in possession of resource set
      information (such as names and icons) that may reveal information about
      the resource owner, which the authorization server's trust relationship
      with the resource server is assumed to accommodate. However, the client
      is a less-trusted party -- in fact, entirely untrustworthy until
      authorization data is associated with its RPT. This specification
      depends on <xref target="OAuth-resource-reg"></xref>, which recommends
      obscuring resource set identifiers in order to avoid leaking personally
      identifiable information to clients through the scope mechanism.</t>

      <t>(More privacy considerations information to come.)</t>

      <t>For information about the technical, operational, and legal elements
      of trust establishment between UMA entities and parties, which affects
      privacy considerations, see <xref target="UMA-obligations"></xref>.</t>
    </section>

    <section anchor="conformance" title="Conformance">
      <t>This section outlines conformance requirements for various entities
      implementing UMA endpoints.</t>

      <t>This specification has dependencies on other specifications, as
      referenced under the normative references listed in this specification.
      Its dependencies on some specifications, such as OpenID Connect (<xref
      target="OCStandard"></xref> and <xref target="OCMessages"></xref>), are
      optional depending on whether the feature in question is used in the
      implementation.</t>

      <t>The authorization server's configuration data provides a
      machine-readable method for it to indicate certain of the conformance
      options it has chosen or supports. Several of the configuration data
      properties allow for indicating extension features. Where this
      specification does not already require optional features to be
      documented, it is RECOMMENDED that authorization server developers and
      deployers document any profiled or extended features explicitly and use
      configuration data to indicate their usage. See <xref
      target="am-endpoints"></xref> for information about providing and
      extending the configuration data.</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This document makes no request of IANA.</t>
    </section>

    <section anchor="Acknowledgments" title="Acknowledgments">
      <t>The current editor of this specification is Thomas Hardjono of MIT.
      The following people are co-authors:<list style="symbols">
          <t>Paul C. Bryan, ForgeRock US, Inc. (former editor)</t>

          <t>Domenico Catalano, Oracle Corp.</t>

          <t>George Fletcher, AOL</t>

          <t>Maciej Machulak, Newcastle University</t>

          <t>Eve Maler, XMLgrrl.com</t>

          <t>Lukasz Moren, Newcastle University</t>

          <t>Christian Scholz, COMlounge GmbH (former editor)</t>

          <t>Jacek Szpot, Newcastle University</t>
        </list></t>

      <t>Additional contributors to this specification include the Kantara UMA
      Work Group participants, a list of whom can be found at <xref
      target="UMAnitarians"></xref>.</t>
    </section>

    <section title="Issues">
      <t>All issues are now captured at the project's GitHub site (<eref
      target="https://github.com/xmlgrrl/UMA-Specifications/issues"></eref>).</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml' ?>

      <reference anchor="OAuth2" target="http://tools.ietf.org/html/rfc6749">
        <front>
          <title>The OAuth 2.0 Authorization Framework</title>

          <author initials="D." surname="Hardt">
            <organization>IETF</organization>
          </author>

          <date day="" month="October" year="2012" />
        </front>
      </reference>

      <reference anchor="OAuth-resource-reg"
                 target="https://tools.ietf.org/html/draft-hardjono-oauth-resource-reg">
        <front>
          <title>OAuth 2.0 Resource Set Registration</title>

          <author initials="T." surname="Hardjono">
            <organization>IETF</organization>
          </author>

          <date day="27" month="December" year="2012" />
        </front>
      </reference>

      <reference anchor="OAuth-introspection"
                 target="http://tools.ietf.org/html/draft-richer-oauth-introspection">
        <front>
          <title>OAuth Token Introspection</title>

          <author initials="J." surname="Richer">
            <organization></organization>
          </author>

          <date day="21" month="February" year="2013" />
        </front>
      </reference>

      <reference anchor="OAuth-bearer"
                 target="http://tools.ietf.org/html/rfc6750">
        <front>
          <title>The OAuth 2.0 Authorization Framework: Bearer Token
          Usage</title>

          <author fullname="M. Jones">
            <organization></organization>
          </author>

          <date day="" month="October" year="2012" />
        </front>
      </reference>

      <reference anchor="OAuth-SAML"
                 target="http://tools.ietf.org/html/draft-ietf-oauth-saml2-bearer">
        <front>
          <title>SAML 2.0 Bearer Assertion Profiles for OAuth 2.0</title>

          <author initials="B." surname="Campbell">
            <organization>Campbell</organization>
          </author>

          <date day="29" month="March" year="2013" />
        </front>
      </reference>

      <reference anchor="hostmeta" target="http://tools.ietf.org/html/rfc6415">
        <front>
          <title>Web Host Metadata</title>

          <author initials="E." surname="Hammer-Lahav">
            <organization>Yahoo!</organization>
          </author>

          <date day="" month="October" year="2011" />
        </front>
      </reference>

      &RFC4627;

      <reference anchor="DynClientReg"
                 target="https://datatracker.ietf.org/doc/draft-ietf-oauth-dyn-reg/">
        <front>
          <title>OAuth Dynamic Client Registration Protocol</title>

          <author initials="J." surname="Richer">
            <organization>IETF</organization>
          </author>

          <date day="29" month="March" year="2013" />
        </front>
      </reference>

      <reference anchor="OCMessages"
                 target="http://openid.net/specs/openid-connect-messages-1_0.html">
        <front>
          <title>OpenID Connect Messages 1.0</title>

          <author initials="N." surname="Sakimura">
            <organization></organization>
          </author>

          <date day="26" month="March" year="2013" />
        </front>
      </reference>

      <reference anchor="OCStandard"
                 target="http://openid.net/specs/openid-connect-standard-1_0.html">
        <front>
          <title>OpenID Connect Standard 1.0</title>

          <author initials="N." surname="Sakimura">
            <organization></organization>
          </author>

          <date day="26" month="March" year="2013" />
        </front>
      </reference>

      <reference anchor="UMA-obligations"
                 target="http://kantarainitiative.org/confluence/display/uma/UMA+Trust+Model">
        <front>
          <title>Binding Obligations on UMA Participants</title>

          <author initials="E." surname="Maler">
            <organization></organization>
          </author>

          <date day="25" month="January" year="2013" />
        </front>
      </reference>

      <reference anchor="OAuth-threat"
                 target="http://tools.ietf.org/html/rfc6819">
        <front>
          <title>OAuth 2.0 Threat Model and Security Considerations</title>

          <author initials="T." surname="Lodderstedt">
            <organization></organization>
          </author>

          <date day="" month="January" year="2013" />
        </front>
      </reference>
    </references>

    <references title="Informative References">
      <reference anchor="UMA-usecases"
                 target="http://kantarainitiative.org/confluence/display/uma/UMA+Scenarios+and+Use+Cases">
        <front>
          <title>UMA Scenarios and Use Cases</title>

          <author initials="E." surname="Maler">
            <organization>Kantara</organization>
          </author>

          <date month="October" year="2010" />
        </front>
      </reference>

      <reference anchor="UMA-casestudies"
                 target="http://kantarainitiative.org/confluence/display/uma/Case+Studies">
        <front>
          <title>UMA Case Studies</title>

          <author initials="E." surname="Maler">
            <organization></organization>
          </author>

          <date day="30" month="March" year="2013" />
        </front>
      </reference>

      <reference anchor="UMAnitarians"
                 target="http://kantarainitiative.org/confluence/display/uma/Participant+Roster">
        <front>
          <title>UMA Participant Roster</title>

          <author initials="E." surname="Maler">
            <organization>Maler</organization>
          </author>

          <date day="1" month="April" year="2013" />
        </front>
      </reference>

      <reference anchor="OAuth-linktypes"
                 target="http://tools.ietf.org/html/draft-wmills-oauth-lrdd">
        <front>
          <title>Link Type Registrations for OAuth 2</title>

          <author initials="W." surname="Mills">
            <organization></organization>
          </author>

          <date day="5" month="February" year="2013" />
        </front>
      </reference>

      <reference anchor="OAuth-meta"
                 target="http://tools.ietf.org/html/draft-sakimura-oauth-meta">
        <front>
          <title>JSON Metadata for OAuth Responses</title>

          <author initials="N." surname="Sakimura">
            <organization></organization>
          </author>

          <date day="12" month="February" year="2013" />
        </front>
      </reference>
    </references>

    <section anchor="History" title="Document History">
      <t>NOTE: To be removed by RFC editor before publication as an RFC.</t>

      <t>See <eref
      target="http://kantarainitiative.org/confluence/display/uma/UMA+1.0+Core+Protocol"></eref>
      for a list of code-breaking and other major changes made to this
      specification at various revision points.</t>
    </section>
  </back>
</rfc>
